plugins {
    id 'org.springframework.boot' version '2.5.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'

    // querydsl 추가
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"

    // api 명세서 자동화
	id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.1ndex'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

ext {
    snippetsDir = file('build/generated-snippets')
}

bootJar {
    archivesBaseName = 'clonetodo-backend'
    archiveFileName = 'clonetodo-backend-1.0.0.jar'

	dependsOn asciidoctor
	    copy {
	        from "${asciidoctor.outputDir}"
	        into 'BOOT-INF/classes/static/docs'
	    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    //springboot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.apache.commons:commons-lang3'    //문자열 관련 라이브러리
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'    //api 명세서 자동화

    //jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    //postgresql
    runtimeOnly 'org.postgresql:postgresql'

    //mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation "redis.clients:jedis:3.3.0"

    // querydsl 추가
    implementation "com.querydsl:querydsl-jpa"
    annotationProcessor(
            'org.projectlombok:lombok',
            "javax.persistence:javax.persistence-api",
            "javax.annotation:javax.annotation-api"
    )
}

asciidoctor {
    dependsOn test
    inputs.dir snippetsDir
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}


//======== querydsl ========
//Q타입 생성 : Gradle → Tasks → build → clean, Gradle → Tasks → other → compileQuerydsl
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDir querydslDir
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
//======== querydsl ========

tasks.named('test') {
    useJUnitPlatform()
}
